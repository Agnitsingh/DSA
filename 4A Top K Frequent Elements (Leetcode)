// TIME COMPLEXITY - O(n log n)


class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        
        map<int, int> mpp;
        for(int i=0; i<nums.size(); i++)
        {
            mpp[nums[i]]++;
        }

        vector<int> v;
        for(auto it : mpp)
        {
            v.push_back(it.second);
        }

        sort(v.begin(), v.end());
        reverse(v.begin(), v.end());

        vector<int> temp;
        
        for(int i=0; i<k; i++)
        {
            temp.push_back(v[i]);
        }

        int min = temp[k-1];

        vector<int> answer;
        for(auto it: mpp)
        {
            if(it.second>=min)
            {
            answer.push_back(it.first);
            }
        }

        return answer;
    }
};
