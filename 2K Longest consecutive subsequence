// TIME COMPLEXITY - O(N + N + N) => O(N) LINEAR
// UNORDERED SET - BEST & AVG CASE (O(1))
// SPACE COMPLEXITY - O(N)

class Solution{
  public:
  
    int findLongestConseqSubseq(int arr[], int n)
    {
      unordered_set<int> st;
      int longest = 1;
      
      for(int i=0; i<n; i++)
      {
          st.insert(arr[i]);
      }
      
      for(auto it: st)
      {
          if(st.find(it-1) == st.end())
          {
              int count = 1;
              int element = it;
              while(st.find(element+1) != st.end())
              {
                  element = element + 1;
                  count = count + 1;
              }
               longest = max(longest, count);
          }
      }
      return longest;
    }
};
