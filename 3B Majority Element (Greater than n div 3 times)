// MAJORITY ELEMENT (>N/3 TIMES)
// TIME COMPLEXITY - O(N)
// SPACE COMPLEXITY - O(1)

class Solution {
  public:
    vector<int> Solve(int n, vector<int>& nums) {
        int count1 = 0;
        int element1;
        int count2 = 0;
        int element2;
        
        for(int i=0; i<n; i++)
        {
            if(count1 == 0 && nums[i]!=element2)
            {
                element1 = nums[i];
                count1 = count1 + 1; 
            }
            
            else if(count2 == 0 && nums[i]!=element1)
            {
                element2 = nums[i];
                count2 = count2 + 1;
            }
            
            else if(nums[i] == element1) count1++;
            else if(nums[i] == element2) count2++;
            
            else{
                count1 = count1-1;
                count2 = count2-1;
            }
        }
        
        int cnt1 = 0;
        int cnt2 = 0;
        int mini = n/3 + 1;
        
        vector<int>answer;
        for(int i=0; i<n; i++)
        {
            if(nums[i] == element1) cnt1++;
            if(nums[i] == element2) cnt2++;
        }
        
        if(cnt1>=mini) answer.push_back(element1);
        if(cnt2>=mini) answer.push_back(element2);
        
        if(answer.size() == 0) return {-1};
        else return answer;
    }
};
