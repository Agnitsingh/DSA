// LONGEST SUBARRAY WITH SUM K ONLY POSITIVES
// Input - 1 2 3 1 1 1 1
// K = 3 Output = 3

#include <iostream>
#include <vector>
using namespace std;


int longSubArr(vector<int> &arr, int K, int N)
{
  int left = 0;
  int right = 0;
  int sum = arr[0];
  int maxLen = 0;

  while(right<N)
  {
    if(left<=right && sum>K)
    {
      sum = sum-arr[left];
      left = left+1;
    }

    if(sum == K)
    {
      maxLen = max(maxLen, (right-left+1));
    }

    right = right+1;
    if(right<N)
    {
      sum = sum+arr[right];
    }
  }

  return maxLen;
}

int main() {
  vector<int> arr;
  int n;
  cin>>n;

  for(int i=0; i<n; i++)
  {
    int val;
    cin >> val;
    arr.push_back(val);
  }

  for(int i=0; i<n; i++)
  {
    cout<<arr[i]<<" ";
  }

  int k = 3;

  cout<<endl<<"LONGEST SUBARRAY WITH SUM "<<k<<" is"<<endl;

  int ans = longSubArr(arr, k, arr.size());
  cout<<ans;
}

TIME COMPLEXITY - O(N+N)
SPACE COMPLEXITY - O(1)
